version: '3'
services:

  redis:
    image: redis:alpine
    container_name: acm-redis
    restart: on-failure:5
    ports:
      - "6379:6379"
    networks:
      - backend

  mongodb:
    image: mongo:latest
    container_name: acm-mongo
    hostname: ${MONGO_HOST}
    restart: on-failure:5
    ports:
      - "27017:27017"
    # volume uses a bind mount to persist db data
    volumes:
      - "mongodata:/data/db"
    networks:
      - backend
    env_file: 
      - ./.env
    environment: # mongo auto sets --auth flag
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    command:
      mongod

  bot:
    build:
      context: .
      dockerfile: ./api/cmd/bot/Dockerfile
    image: acm-selu-bot
    container_name: acm-bot
    links:
      - mongodb
    depends_on:
      - mongodb 
      - redis
    restart: unless-stopped
    # bind mount. rebuilds on change. 
    # bind mount is not necessary unless you want live changes.
    # bot probably needs its own repo in the future
    # volumes: 
    #   - ./api  # specify your current dir
    networks:
      - backend
    environment: 
      BOT_TOKEN: ${BOT_TOKEN}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}

  api:
    build:
      context: .
      dockerfile: ./api/cmd/server/Dockerfile
    # build custom image
    image: acm-selu-api
    container_name: acm-api
    ports:
      - 8081:8081
    links:
      - mongodb
    depends_on:
      - mongodb
      - redis 
    restart: unless-stopped
    # changes here will update files in container 
    # volumes: 
    #   - ./api  # specify your current dir
    networks: 
      - backend 
      - frontend
    environment: 
      API_HOST: ${API_HOST}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}

  web:
    build:
      context: .
      dockerfile: ./web/Dockerfile
    container_name: acm-web
    ports:
      - 3000:3000
    depends_on:
      - api
    restart: unless-stopped
    networks: 
      - frontend 
      - backend

volumes:
  mongodata:

networks:
  backend:
    name: backend-net
    driver: bridge
  frontend:
    name: frontend-net
    driver: bridge